<?php
// $Id: uc_aac.module,v 1.10.2.5 2009/11/30 23:45:30 antoinesolutions Exp $

/**
 * @file
 * Ajax Attribute Calculations
 *
 * Updates product information using AJAX whenever a product attribute is
 * altered. Also updates the attribute adjustments dynamically if they are
 * configured to display.
 */


/******************************************************************************
 * Drupal Hooks
 *****************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_aac_menu() {
  $items['uc_aac'] = array(
    'title' => t('Product Adjustments'),
    'description' => t('Calculate the price of your product.'),
    'page callback' => '_uc_aac_calculate',
    'access arguments' => array('access content'),
    'weight' => 5,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function uc_aac_form_alter(&$form, $form_state, $form_id) {
  if (strstr($form_id, 'uc_product_add_to_cart_form_')) {
    static $uc_aac_js = false;

    if (!$uc_aac_js) {
      $uc_aac_js = true;

      drupal_add_js('misc/jquery.form.js');
      drupal_add_js(drupal_get_path('module', 'uc_aac') .'/uc_aac.js');
      // Call uc_aac_calculate once for each form on page load
      drupal_add_js("$('.attributes').find('[@name^=attributes]:first').each(function(i) { uc_aac_calculate(this); });", 'inline', 'footer');
    }

    // If the product has attributes.
    if (isset($form['#parameters'][2]->attributes)) {
      $nid = $form['nid']['#value'];
      $product =& $form['#parameters'][2];
      $form['qty']['#default_value'] = $product->default_qty;
      $context = array(
        'revision' => 'formatted',
        'type' => 'product',
        'class' => array(
          'product',
        ),
        'subject' => array(
          'node' => $product,
        ),
      );

      foreach (element_children($form['attributes']) as $aid) {
        // Reset options for each $aid
        $options = array();

        if (isset($_POST['attributes'][$aid])) {
          $selected_oid = $_POST['attributes'][$aid];
        }
        else {
          $selected_oid = $product->attributes[$aid]->default_option;
        }
        // TODO: Find out why the default checkbox option is not always an array.
        if ($form['attributes'][$aid]['#type'] == 'checkboxes' && !is_array($selected_oid)) {
          $selected_oid = array();
        }
        // TODO: Find out why the default text option is not always an empty string.
        if ($form['attributes'][$aid]['#type'] == 'textfield') {
          $selected_oid = ($selected_oid === '0' ? '' : $selected_oid);
        }
        $form['attributes'][$aid]['#default_value'] = $selected_oid;

        // If reprice is enabled and price adjustments are to be displayed
        if (variable_get('uc_aac_reprice', 1) == 1 && variable_get('uc_attribute_option_price_format', 'adjustment') == 'adjustment'
            || (count($product->attributes) > 1 && variable_get('uc_attribute_option_price_format', 'adjustment') == 'total')) {
          foreach ($product->attributes[$aid]->options as $option) {
            if ($form['attributes'][$aid]['#type'] == 'checkboxes') {
              // Negate selected options
              if (in_array($option->oid, $selected_oid)) {
                $price = -$option->price;
              }
              else {
                $price = $option->price;
              }
            }
            else {
              $price = $option->price - $product->attributes[$aid]->options[$selected_oid]->price;
            }

            // Rebuild option text
            $oid_text = '';
            if ($price != 0) {
              $oid_text = ', ';
              if ($price > 0) {
                $oid_text .= '+'. uc_price($price, $context);
              }
              else {
                $oid_text .= '('. uc_price($price, $context) .')';
              }
            }
            $options[$option->oid] = $option->name . $oid_text;
          }
        }

        // If options have been reconfigured
        if (!empty($options)) {
          $form['attributes'][$aid]['#options'] = $options;
        }
      }
    }
  }
  elseif ($form_id == 'uc_attribute_admin_settings') {
    $form['uc_attribute_option_price_format']['uc_aac_reprice'] = array(
      '#type' => 'checkbox',
      '#title' => t('Ajax Attribute Calculations dynamically adjusts product information as a product\'s attribute options are changed.'),
      '#default_value' => variable_get('uc_aac_reprice', 1),
      '#weight' => 0,
      '#description' => t('When checked, a customer\'s selected attributes will display no price adjustment and all other attribute prices will be relative to the current price.'),
    );
  }
}


/******************************************************************************
 * Module Functions
 *****************************************************************************/

/**
 * Calculate product adjustments based on attribute option selections.
 */
function _uc_aac_calculate() {
  $nid = array_pop(explode('_', $_POST['form_id']));
  $output['nid'] = $nid;

  // Load the node and store the submitted data for later.
  $product = node_load($nid);

  // Set new default attribute options to the currently selected options so the
  // form regenerates correctly.
  if (isset($_POST['attributes'])) {
    foreach ($_POST['attributes'] as $aid => $oid) {
      $product->attributes[$aid]->default_option = $oid;
    }
  }

  // Create a fake cart item with the submitted node, quantity and attributes.
  $item = new stdClass();
  $item->nid = $nid;
  $item->qty = $_POST['qty'];
  $item->model = $product->model;
  $item->cost = $product->cost;
  $item->price = $product->sell_price;
  $item->weight = $product->weight;
  $item->data = unserialize($product->data);
  $item->data['nid'] = $nid;
  $item->data['attributes'] = $_POST['attributes'];

  // Let other modules adjust our cart item as needed.
  $item->data = module_invoke_all('add_to_cart_data', $item->data);
  module_invoke_all('cart_item', 'load', $item);

  $context = array(
    'revision' => 'themed',
    'type' => 'product',
    'class' => array(
      'product',
    ),
    'subject' => array(
      'node' => $product,
    ),
  );

  // Render the updated display price
  $context['class'][1] = 'display';
  $context['field'] = 'sell_price';
  $output['replacements']['display'] = theme('uc_product_price', $item->price, $context);

  // Render the updated model
  $output['replacements']['model'] = theme('uc_product_model', $item->model, 0, 0);

  // Render the updated cost
  $context['class'][1] = 'cost';
  $context['field'] = 'cost';
  $output['replacements']['cost'] = theme('uc_product_price', $item->cost, $context);

  // Render the updated sell price
  $context['class'][1] = 'sell';
  $context['field'] = 'sell_price';
  $output['replacements']['sell'] = theme('uc_product_price', $item->price, $context, array('label' => 1));

  // Render the updated weight
  $output['replacements']['weight'] = theme('uc_product_weight', $item->weight, $product->weight_units, 0, 0);

  // Unset the form id to ensure Drupal doesn't attempt to process it.
  unset($_POST['form_id']);
  // Render the updated form
  $output['form'] = drupal_get_form('uc_product_add_to_cart_form_'. $nid, $product);
  // TODO: Fix bug where multiple add_to_cart forms on a single page have
  // elements with identical css id's after regenerating the forms

  drupal_set_header("Content-Type: text/javascript; charset=utf-8");
  print drupal_to_js($output);
  exit;
}
